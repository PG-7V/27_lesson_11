# -*- coding: utf-8 -*-
"""27Class_work_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ebLEjAJmuw3NsBTdWJtRFgmFZD1EozCV

# **БлэкЖдек**

Класс: Карта

атрибуты:

* масть (str)
* значение (int)
* туз ли это (bool)

метод:

* если **значение** Туз(11, 1) то предлагается выбор 1 или 11 через input
"""


class Card:
    mast = str
    value = int
    tuz = bool

    def is_tuz(self):
        return self.value == 11

    def choice(self):
        'если значение Туз(11, 1) то предлагается выбор 1 или 11 через input'
        pass


c = Card("chirva", 6)

c.choice()

# chioce 1 or 11: 1


from time import time, ctime, sleep


def timer(minutes):
    time_start = time()
    while time() - time_start < minutes * 60:
        print("\b" * 100, end=str(round(time() - time_start, 2)))
        # sleep(0.3)


timer(1)


class Cart:

    def init(self, m, value):  # 11 - tuz
        self.m = m
        self.value = value
        self.is_tuz = self.is_tuz()

    def is_tuz(self):
        return True if self.value == 11 else False

    def res(self):
        if self.is_tuz:
            self.value = int(input("1 или 11:"))


import random


class Card:
    suit = ['chirva', 'pika', 'kresti', 'bubl']
    value = [4, 5, 6, 7, 8, 9, 10]
    ace = True

    def ace(self, ):
        card_score = input('1 or 11')
        x = [random.choice(self.suit), random.choice(self.value)]


x = Card()

x.ace()


class Card:
    suit = "pika"
    value = 6
    ace = True

    def get_card(self):
        self.value = int(input())
        if self.value != 11:
            self.ace = False


c = Card()
c.get_card()


class Card:

    def __init__(self, mast, val, tuz_value=11):  # __init__ всегда должен return None
        self.mast = mast
        self.value = val

    #     self.tuz_value = tuz_value
    #     self.tuz = self.is_tuz()

    # def is_tuz(self):
    #     return self.value == self.tuz_value

    def __repr__(self):
        return f"{self.mast}-{self.value}"


c = Card("hello", "world")

print(c)

values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
masts = ['chirva', 'pika', 'kresti', 'bubl']
deck = list()

for mast in masts:
    for value in values:
        deck.append(Card(mast, value))

deck

from random import shuffle


def chesat_kolodu(deck):
    shuffle(deck)


chesat_kolodu(deck)

print(deck)

a, b = Card("c", 10), Card("b", 2)

l = [Card("c", 10), Card("b", 2), Card("c", 3), Card("b", 6)]

type(l[0])

l.append(Card("k", 5))

l

from random import shuffle


class Card:

    def __init__(self, mast: str, val: int, tuz_value=11) -> None:  # __init__ всегда должен return None
        self.mast = mast
        self.value = val

    def __repr__(self) -> str:
        return f"{self.mast}-{self.value}"


class Deck:

    def __init__(self, masts: list, values: list) -> None:
        self.__deck = []
        self.masts = masts
        self.values = values
        self.generate_deck()
        self.chesat_kolodu()

    def generate_deck(self) -> None:
        for mast in self.masts:
            for value in self.values:
                self.__deck.append(Card(mast, value))

    def chesat_kolodu(self) -> None:
        shuffle(self.__deck)

    def get_card(self) -> Card:
        return self.__deck.pop(0)

    def __repr__(self) -> str:
        return f'{len(self.__deck)}/{len(self.values) * len(self.masts)} Cards'


from collections import defaultdict
from random import choice

choice_list = defaultdict(list)


class Player:

    def __init__(self, name: str) -> None:
        self.name = name
        self.hand = []

    def get_card(self, deck: Deck) -> None:
        if self.take_or_not_take():
            self.hand.append(deck.get_card())

    def score(self) -> int:
        return sum([card.value for card in self.hand])


class Computer(Player):
    def take_or_not_take(self) -> bool:
        return choice(choice_list.get(self.score(), [False]))


class Human(Player):
    def take_or_not_take(self) -> bool:
        result = input("Take card?: ") == '1'
        self.save_result(result)
        return result

    def save_result(self, result: bool) -> None:
        choice_list[self.score()].append(result)


values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
masts = ['chirva', 'pika', 'kresti', 'bubl']

deck = Deck(masts, values)
players = [Computer("comp 1"), Computer("comp 2"), Human("You")]

while all([pl.score() < 21 and pl.score() != 21 for pl in players]):
    for player in players:
        print(player.name, player.score())
        player.get_card(deck)

choice_list

Deck()

import collections

collections.defaultdict()

time.ctime()

list()

int()





